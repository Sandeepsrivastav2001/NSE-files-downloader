import fitz  # PyMuPDF
import os

# === File Paths ===
PDF_PATH = r"C:\Users\Administrator\Desktop\KYC-FORM9-13.pdf"
OUTPUT_PDF = r"C:\Users\Administrator\Desktop\KYC-FORM_Fillable.pdf"
DEBUG_FOLDER = r"C:\Users\Administrator\Desktop\Debug_Checkboxes"
os.makedirs(DEBUG_FOLDER, exist_ok=True)

def detect_vector_fields(pdf_path,
                         cb_min_size=5, cb_max_size=22,
                         tb_min_w=30, tb_max_h=25):
    """
    Detect vector checkboxes and textboxes in PDF.
    Returns: (all_checkboxes, all_textboxes)
    """
    doc = fitz.open(pdf_path)
    all_checkboxes = []
    all_textboxes = []

    for page_num, page in enumerate(doc):
        page_checkboxes = []
        page_textboxes = []

        for path in page.get_drawings():
            rect = path["rect"]
            if rect is None:
                continue

            w = rect.width
            h = rect.height
            aspect_ratio = w / h if h != 0 else 0
            area = w * h

            # --- Checkbox detection ---
            if (cb_min_size <= w <= cb_max_size and cb_min_size <= h <= cb_max_size
                and 0.75 <= aspect_ratio <= 1.25
                and 20 <= area <= 500):
                page_checkboxes.append(rect)
                continue

            # --- Textbox detection ---
            if (w >= tb_min_w and h <= tb_max_h
                and aspect_ratio >= 2.5):
                page_textboxes.append(rect)

        all_checkboxes.append(page_checkboxes)
        all_textboxes.append(page_textboxes)

        print(f"Page {page_num+1}: {len(page_checkboxes)} checkboxes, {len(page_textboxes)} textboxes found")

        # Debug image save
        pix = page.get_pixmap(dpi=150)
        debug_path = os.path.join(DEBUG_FOLDER, f"page_{page_num+1}_debug.png")
        pix.save(debug_path)

    doc.close()
    return all_checkboxes, all_textboxes

def add_interactive_fields(pdf_path, output_path, page_checkboxes, page_textboxes):
    """
    Add clickable checkboxes & fillable text fields.
    """
    doc = fitz.open(pdf_path)

    for page_num in range(len(doc)):
        page = doc[page_num]

        # --- Add checkboxes ---
        for idx, rect in enumerate(page_checkboxes[page_num]):
            cb = fitz.Widget()
            cb.rect = rect
            cb.field_type = fitz.PDF_WIDGET_TYPE_CHECKBOX
            cb.field_name = f"checkbox_{page_num}_{idx}"
            cb.button_style = "check"
            cb.border_width = 1
            cb.border_color = (0, 0, 0)
            cb.fill_color = (1, 1, 1)
            page.add_widget(cb)

        # --- Add text fields ---
        for idx, rect in enumerate(page_textboxes[page_num]):
            tf = fitz.Widget()
            tf.rect = rect
            tf.field_type = fitz.PDF_WIDGET_TYPE_TEXT
            tf.field_name = f"textbox_{page_num}_{idx}"
            tf.text_color = (0, 0, 0)
            tf.border_width = 1
            tf.border_color = (0, 0, 0)
            tf.fill_color = (1, 1, 1)
            page.add_widget(tf)

    doc.save(output_path, incremental=False, encryption=fitz.PDF_ENCRYPT_KEEP)
    doc.close()

if __name__ == "__main__":
    # Detect both
    checkboxes, textboxes = detect_vector_fields(PDF_PATH)

    # Add interactive fields
    add_interactive_fields(PDF_PATH, OUTPUT_PDF, checkboxes, textboxes)

    print(f"\nâœ… Updated PDF with checkboxes & text fields saved at:\n{OUTPUT_PDF}")
    print(f"Debug previews saved in:\n{DEBUG_FOLDER}")
